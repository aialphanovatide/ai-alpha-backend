"""cascade implementation

Revision ID: de62db261737
Revises: af14c3d4692e
Create Date: 2024-09-09 14:10:33.979063

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision: str = 'de62db261737'
down_revision: Union[str, None] = 'af14c3d4692e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)

    tables_to_update = [
        'alert', 'analysis', 'article', 'blacklist', 'chart', 'competitor',
        'dapps', 'hacks', 'introduction', 'keyword', 'narrative_trading',
        'revenue_model', 'site', 'token_distribution', 'token_utility',
        'tokenomics', 'top_story', 'upgrades', 'value_accrual_mechanisms'
    ]

    for table in tables_to_update:
        fks = inspector.get_foreign_keys(table)
        for fk in fks:
            if fk['referred_table'] == 'coin_bot' and 'CASCADE' not in fk.get('options', {}):
                op.drop_constraint(fk['name'], table, type_='foreignkey')
                op.create_foreign_key(None, table, 'coin_bot', ['coin_bot_id'], ['bot_id'], ondelete='CASCADE')

    # Alter 'name' column in 'category' table to be non-nullable
    category_columns = inspector.get_columns('category')
    name_column = next((col for col in category_columns if col['name'] == 'name'), None)
    if name_column and name_column['nullable']:
        op.alter_column('category', 'name',
                        existing_type=sa.VARCHAR(),
                        nullable=False)

    # Ensure 'category_id' in 'coin_bot' table is not nullable
    coin_bot_columns = inspector.get_columns('coin_bot')
    category_id_column = next((col for col in coin_bot_columns if col['name'] == 'category_id'), None)
    if category_id_column and category_id_column['nullable']:
        op.alter_column('coin_bot', 'category_id',
                        existing_type=sa.INTEGER(),
                        nullable=False)

    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)

    tables_to_update = [
        'alert', 'analysis', 'article', 'blacklist', 'chart', 'competitor',
        'dapps', 'hacks', 'introduction', 'keyword', 'narrative_trading',
        'revenue_model', 'site', 'token_distribution', 'token_utility',
        'tokenomics', 'top_story', 'upgrades', 'value_accrual_mechanisms'
    ]

    for table in tables_to_update:
        fks = inspector.get_foreign_keys(table)
        for fk in fks:
            if fk['referred_table'] == 'coin_bot' and 'CASCADE' in fk.get('options', {}):
                op.drop_constraint(fk['name'], table, type_='foreignkey')
                op.create_foreign_key(None, table, 'coin_bot', ['coin_bot_id'], ['bot_id'])

    # Revert 'name' column in 'category' table to be nullable
    category_columns = inspector.get_columns('category')
    name_column = next((col for col in category_columns if col['name'] == 'name'), None)
    if name_column and not name_column['nullable']:
        op.alter_column('category', 'name',
                        existing_type=sa.VARCHAR(),
                        nullable=True)

    # Revert 'category_id' in 'coin_bot' table to be nullable
    coin_bot_columns = inspector.get_columns('coin_bot')
    category_id_column = next((col for col in coin_bot_columns if col['name'] == 'category_id'), None)
    if category_id_column and not category_id_column['nullable']:
        op.alter_column('coin_bot', 'category_id',
                        existing_type=sa.INTEGER(),
                        nullable=True)

    # ### end Alembic commands ###