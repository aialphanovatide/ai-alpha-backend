"""article modified, section table created

Revision ID: 70376d9c8c8a
Revises: e7ee74b7b181
Create Date: 2024-10-28 14:44:56.592764

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '70376d9c8c8a'
down_revision: Union[str, None] = 'e7ee74b7b181'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index('ix_apscheduler_jobs_next_run_time', table_name='apscheduler_jobs')
    # op.drop_table('apscheduler_jobs')
    # op.drop_table('user_verifications')
    # op.create_unique_constraint(None, 'admins', ['auth_token'])
    # op.drop_constraint('analysis_coin_bot_id_fkey', 'analysis', type_='foreignkey')
    # op.create_foreign_key(None, 'analysis', 'coin_bot', ['coin_bot_id'], ['bot_id'])
    # op.add_column('article', sa.Column('section_id', sa.Integer(), nullable=False))
    # op.alter_column('article', 'date',
    #            existing_type=sa.VARCHAR(),
    #            nullable=True)
    # op.alter_column('article', 'title',
    #            existing_type=sa.VARCHAR(),
    #            nullable=True)
    # op.alter_column('article', 'url',
    #            existing_type=sa.VARCHAR(),
    #            nullable=True)
    # op.alter_column('article', 'created_at',
    #            existing_type=postgresql.TIMESTAMP(),
    #            nullable=True)
    # op.create_foreign_key(None, 'article', 'sections', ['section_id'], ['id'], ondelete='CASCADE')
    # op.drop_column('article', 'is_article_efficent')
    # op.drop_column('article', 'is_top_story')
    # op.drop_column('article', 'image')
    # op.drop_column('article', 'used_keywords')
    # op.alter_column('category', 'alias',
    #            existing_type=sa.VARCHAR(),
    #            nullable=True)
    # op.drop_constraint('coin_bot_category_id_fkey', 'coin_bot', type_='foreignkey')
    # op.create_foreign_key(None, 'coin_bot', 'category', ['category_id'], ['category_id'], ondelete='CASCADE')
    # op.alter_column('narrative_trading', 'image_url',
    #            existing_type=sa.VARCHAR(),
    #            nullable=False)
    # op.alter_column('notifications', 'updated_at',
    #            existing_type=postgresql.TIMESTAMP(timezone=True),
    #            type_=sa.TIMESTAMP(),
    #            existing_nullable=False)
    # op.alter_column('purchased_plan', 'reference_name',
    #            existing_type=sa.VARCHAR(),
    #            nullable=False)
    # op.alter_column('purchased_plan', 'price',
    #            existing_type=sa.INTEGER(),
    #            nullable=False)
    # op.alter_column('purchased_plan', 'is_subscribed',
    #            existing_type=sa.BOOLEAN(),
    #            nullable=False)
    # op.create_unique_constraint('uq_user_plan', 'purchased_plan', ['user_id', 'reference_name'])
    # op.drop_column('roles', 'updated_at')
    # op.drop_constraint('tokens_admin_id_fkey', 'tokens', type_='foreignkey')
    # op.drop_column('tokens', 'updated_at')
    # op.alter_column('topics', 'updated_at',
    #            existing_type=postgresql.TIMESTAMP(timezone=True),
    #            type_=sa.TIMESTAMP(),
    #            existing_nullable=False)
    # op.alter_column('user_table', 'email_verified',
    #            existing_type=sa.VARCHAR(),
    #            type_=sa.Boolean(),
    #            existing_nullable=True)
    # op.alter_column('user_table', 'birth_date',
    #            existing_type=sa.DATE(),
    #            type_=sa.String(),
    #            existing_nullable=True)
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('user_table', 'birth_date',
    #            existing_type=sa.String(),
    #            type_=sa.DATE(),
    #            existing_nullable=True)
    # op.alter_column('user_table', 'email_verified',
    #            existing_type=sa.Boolean(),
    #            type_=sa.VARCHAR(),
    #            existing_nullable=True)
    # op.alter_column('topics', 'updated_at',
    #            existing_type=sa.TIMESTAMP(),
    #            type_=postgresql.TIMESTAMP(timezone=True),
    #            existing_nullable=False)
    # op.add_column('tokens', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    # op.create_foreign_key('tokens_admin_id_fkey', 'tokens', 'admins', ['admin_id'], ['admin_id'])
    # op.add_column('roles', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    # op.drop_constraint('uq_user_plan', 'purchased_plan', type_='unique')
    # op.alter_column('purchased_plan', 'is_subscribed',
    #            existing_type=sa.BOOLEAN(),
    #            nullable=True)
    # op.alter_column('purchased_plan', 'price',
    #            existing_type=sa.INTEGER(),
    #            nullable=True)
    # op.alter_column('purchased_plan', 'reference_name',
    #            existing_type=sa.VARCHAR(),
    #            nullable=True)
    # op.alter_column('notifications', 'updated_at',
    #            existing_type=sa.TIMESTAMP(),
    #            type_=postgresql.TIMESTAMP(timezone=True),
    #            existing_nullable=False)
    # op.alter_column('narrative_trading', 'image_url',
    #            existing_type=sa.VARCHAR(),
    #            nullable=True)
    # op.drop_constraint(None, 'coin_bot', type_='foreignkey')
    # op.create_foreign_key('coin_bot_category_id_fkey', 'coin_bot', 'category', ['category_id'], ['category_id'])
    # op.alter_column('category', 'alias',
    #            existing_type=sa.VARCHAR(),
    #            nullable=False)
    # op.add_column('article', sa.Column('used_keywords', sa.VARCHAR(), autoincrement=False, nullable=True))
    # op.add_column('article', sa.Column('image', sa.VARCHAR(), autoincrement=False, nullable=True))
    # op.add_column('article', sa.Column('is_top_story', sa.BOOLEAN(), autoincrement=False, nullable=True))
    # op.add_column('article', sa.Column('is_article_efficent', sa.VARCHAR(), autoincrement=False, nullable=True))
    # op.drop_constraint(None, 'article', type_='foreignkey')
    # op.alter_column('article', 'created_at',
    #            existing_type=postgresql.TIMESTAMP(),
    #            nullable=False)
    # op.alter_column('article', 'url',
    #            existing_type=sa.VARCHAR(),
    #            nullable=False)
    # op.alter_column('article', 'title',
    #            existing_type=sa.VARCHAR(),
    #            nullable=False)
    # op.alter_column('article', 'date',
    #            existing_type=sa.VARCHAR(),
    #            nullable=False)
    # op.drop_column('article', 'section_id')
    # op.drop_constraint(None, 'analysis', type_='foreignkey')
    # op.create_foreign_key('analysis_coin_bot_id_fkey', 'analysis', 'coin_bot', ['coin_bot_id'], ['bot_id'], ondelete='CASCADE')
    # op.drop_constraint(None, 'admins', type_='unique')
    # op.create_table('user_verifications',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('university', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.Column('email_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('certification_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('certification_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    # sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    # sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    # sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['user_id'], ['user_table.user_id'], name='user_verifications_user_id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='user_verifications_pkey'),
    # sa.UniqueConstraint('token', name='user_verifications_token_key')
    # )
    # op.create_table('apscheduler_jobs',
    # sa.Column('id', sa.VARCHAR(length=191), autoincrement=False, nullable=False),
    # sa.Column('next_run_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('job_state', postgresql.BYTEA(), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name='apscheduler_jobs_pkey')
    # )
    # op.create_index('ix_apscheduler_jobs_next_run_time', 'apscheduler_jobs', ['next_run_time'], unique=False)
    pass
    # ### end Alembic commands ###
