"""cascade added to token schema

Revision ID: 9e3e0f31ac3a
Revises: 8c0527cff320
Create Date: 2024-09-18 09:59:33.991078

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision: str = '9e3e0f31ac3a'
down_revision: Union[str, None] = '8c0527cff320'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    foreign_keys = inspector.get_foreign_keys('tokens')
    
    # Check if the foreign key already exists
    fk_exists = any(fk['referred_table'] == 'admins' and 
                    fk['referred_columns'] == ['admin_id'] and 
                    fk['constrained_columns'] == ['admin_id'] 
                    for fk in foreign_keys)
    
    if not fk_exists:
        op.create_foreign_key(None, 'tokens', 'admins', ['admin_id'], ['admin_id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    
    # Check for foreign key in 'tokens' table
    foreign_keys = inspector.get_foreign_keys('tokens')
    fk_name = next((fk['name'] for fk in foreign_keys if fk['referred_table'] == 'admins' and 
                    fk['referred_columns'] == ['admin_id'] and 
                    fk['constrained_columns'] == ['admin_id']), None)
    
    if fk_name:
        op.drop_constraint(fk_name, 'tokens', type_='foreignkey')
    
    # Check for unique constraint in 'admins' table
    unique_constraints = inspector.get_unique_constraints('admins')
    unique_constraint_name = next((uc['name'] for uc in unique_constraints 
                                   if set(uc['column_names']) == {'admin_id'}), None)
    
    if unique_constraint_name:
        op.drop_constraint(unique_constraint_name, 'admins', type_='unique')
    # ### end Alembic commands ###