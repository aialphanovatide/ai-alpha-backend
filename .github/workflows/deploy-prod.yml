name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    env:
      POSTGRES_DB_PROD: ${{ secrets.POSTGRES_DB_PROD }}
      POSTGRES_USER_PROD: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD_PROD: ${{ secrets.POSTGRES_PASSWORD_PROD }}
      FLASK_ENV: production
      FLASK_DEBUG: 0
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      NEWS_BOT_API_KEY: ${{ secrets.NEWS_BOT_API_KEY }}
      AWS_ACCESS: ${{ secrets.AWS_ACCESS }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_PRODUCT_ALERTS: ${{ secrets.SLACK_PRODUCT_ALERTS }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      CHANNEL_ID_AI_ALPHA_FOUNDERS: ${{ secrets.CHANNEL_ID_AI_ALPHA_FOUNDERS }}
      CALL_TO_TRADE_TOPIC_ID: ${{ secrets.CALL_TO_TRADE_TOPIC_ID }}
      MAIL_DEFAULT_SENDER: ${{ secrets.MAIL_DEFAULT_SENDER }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      NGROK_DOMAIN: ${{ secrets.NGROK_DOMAIN }}
      NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
      BINANCE_API_URL: ${{ secrets.BINANCE_API_URL }}
      COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Firebase service account
      run: |
        mkdir -p services/firebase
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > services/firebase/service-account.json

    - name: Deploy to Production
      run: |
        echo "Starting deployment to Production environment..."
        cd $GITHUB_WORKSPACE || exit 1
        
        echo "Fetching the latest changes..."
        git fetch origin
        
        echo "Checking out the main branch..."
        git checkout main
        
        echo "Pulling the latest changes from the main branch..."
        PREVIOUS_COMMIT=$(git rev-parse HEAD)
        git pull origin main
        
        start_containers() {
          docker-compose -f docker-compose.prod.yml -p ai-alpha-prod up -d --build
          return $?
        }
        
        stop_containers() {
          docker-compose -f docker-compose.prod.yml -p ai-alpha-prod down
        }
        
        health_check() {
          for i in {1..2}; do
            if curl -f http://localhost:9002/health; then
              return 0
            fi
            echo "Health check attempt $i failed. Retrying in 30 seconds..."
            sleep 30
          done
          return 1
        }
        
        rollback() {
          echo "Rolling back to previous commit..."
          git reset --hard $PREVIOUS_COMMIT
          stop_containers
          start_containers
          if health_check; then
            echo "Rollback successful"
          else
            echo "Rollback failed. Manual intervention required."
            exit 1
          fi
        }
        
        echo "Stopping containers..."
        stop_containers
        echo "Starting containers..."
        if start_containers; then
          echo "Waiting for services to start..."
          sleep 120
          echo "Performing health check..."
          if health_check; then
            echo "Deployment successful. Health check passed."
          else
            echo "Health check failed. Rolling back..."
            rollback
          fi
        else
          echo "Failed to start containers. Rolling back..."
          rollback
        fi

    - name: Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment to Production completed successfully!"
        else
          echo "Deployment to Production failed. Please check the logs for details."
        fi

    - name: Debug Information
      if: failure()
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of directory:"
        ls -la
        echo "Git status:"
        git status
        echo "Docker version:"
        docker --version
        echo "Docker Compose version:"
        docker-compose --version
        echo "Container status:"
        docker-compose -f docker-compose.prod.yml ps
        echo "Container logs:"
        docker-compose -f docker-compose.prod.yml logs --tail=100