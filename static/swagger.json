{
  "swagger": "2.0",
  "info": {
    "title": "AI Alpha API",
    "description": "API documentation for AI Alpha",
    "version": "2.1"
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "X-API-Key"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Admin",
      "description": "Handles management and administrative operations within the internal dashboard."
    },
    {
      "name": "Alerts",
      "description": "Operations related to the Alerts"
    },
    {
      "name": "Ask AI",
      "description": "Operations related to the Ask AI (Coin info)"
    },
    {
      "name": "Category",
      "description": "Operations related to the Category"
    },
    {
      "name": "Chart",
      "description": "Operations related to the Charts"
    },
    {
      "name": "Coin",
      "description": "Operations related to coins"
    },
    {
      "name": "CoinGecko",
      "description": "Operations related to CoinGecko"
    },
    {
      "name": "Competitors Tokenomics",
      "description": "Operations related to the Competitors tokenomics section"
    },
    {
      "name": "Content Creation",
      "description": "Operations related to the Content Creation"
    },
    {
      "name": "Dapps",
      "description": "Operations related to the Dapps section "
    },
    {
      "name": "Hacks",
      "description": "Operations related to the Hacks section"
    },
    {
      "name": "Introduction",
      "description": "Operations related to the Introduction section."
    },
    {
      "name": "Providers",
      "description": "Data coming from external providers."
    },
    {
      "name": "Sections",
      "description": "Operations related to the Sections"
    },
    {
      "name": "Tokenomics",
      "description": "Operations related to the Tokenomics section"
    },
    {
      "name": "Upgrades",
      "description": "Operations related to the Upgrades section"
    },
    {
      "name": "User",
      "description": "Operations related to the User"
    }
  ],
  "paths": {
    "/admin/register": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Register a new admin with a specified role.",
        "description": "Register a new admin with a specified role.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Admin registration details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "role_id": {
                  "type": "integer"
                }
              },
              "required": [
                "email",
                "username",
                "password",
                "role_id"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Admin registered successfully"
          },
          "400": {
            "description": "Bad request (missing data or invalid role)"
          },
          "409": {
            "description": "Conflict (email or username already exists)"
          },
          "500": {
            "description": "Database error or unexpected error"
          }
        }
      }
    },
    "/admin/login": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Authenticate an admin.",
        "description": "Authenticate an admin.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Admin login details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Database error or unexpected error"
          }
        }
      }
    },
    "/admin/{admin_id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Retrieve admin information.",
        "description": "Retrieve admin information.",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin information retrieved successfully"
          },
          "404": {
            "description": "Admin not found"
          },
          "500": {
            "description": "Database error or unexpected error"
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Update admin information.",
        "description": "Update admin information.",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Admin update details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Admin updated successfully"
          },
          "400": {
            "description": "Bad request (invalid data)"
          },
          "404": {
            "description": "Admin not found"
          },
          "500": {
            "description": "Database error or unexpected error"
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete admin.",
        "description": "Delete admin.",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin deleted successfully"
          },
          "404": {
            "description": "Admin not found"
          },
          "500": {
            "description": "Database error or unexpected error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve all users with their purchased plans, with optional pagination.",
        "description": "Retrieve all users with their purchased plans, with optional pagination.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (max: 100)",
            "required": false,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, returns list of users with plans",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "object",
                        "description": "User details"
                      },
                      "purchased_plans": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "description": "Plan details"
                        }
                      }
                    }
                  }
                },
                "message": {
                  "type": "string"
                },
                "pagination": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    },
                    "has_next": {
                      "type": "boolean"
                    },
                    "has_prev": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid pagination parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve a specific user with their purchased plans.",
        "description": "Retrieve a specific user with their purchased plans.",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "ID of the user to retrieve",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "email",
            "in": "query",
            "description": "Email address of the user to retrieve",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "nickname",
            "in": "query",
            "description": "Nickname of the user to retrieve",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "auth0id",
            "in": "query",
            "description": "Auth0 ID of the user to retrieve",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation, returns user data with plans",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object"
                    },
                    "purchased_plans": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "User identifier not provided or invalid"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register a new user in the system.",
        "description": "Register a new user in the system.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "full_name": {
                  "type": "string",
                  "description": "The full name of the user"
                },
                "nickname": {
                  "type": "string",
                  "description": "The nickname or username of the user"
                },
                "email": {
                  "type": "string",
                  "description": "The email address of the user"
                },
                "email_verified": {
                  "type": "boolean",
                  "description": "Whether the email has been verified",
                  "default": false
                },
                "picture": {
                  "type": "string",
                  "description": "URL to the user's profile picture"
                },
                "auth0id": {
                  "type": "string",
                  "description": "The Auth0 ID of the user"
                },
                "provider": {
                  "type": "string",
                  "description": "The authentication provider used"
                },
                "birth_date": {
                  "type": "string",
                  "description": "The birth date of the user"
                }
              },
              "required": [
                "full_name",
                "nickname",
                "email"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully created",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "user": {
                  "type": "object",
                  "description": "The complete newly created user object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing data in the request"
          },
          "409": {
            "description": "User with this email or nickname already exists"
          },
          "500": {
            "description": "Internal server error or database error"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user account identified by auth0id or email.",
        "description": "Delete a user account identified by auth0id or email.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "auth0id": {
                  "type": "string",
                  "description": "Full or partial auth0id of the user to delete"
                },
                "email": {
                  "type": "string",
                  "description": "Email of the user to delete"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User account deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Neither auth0id nor email provided"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/sections": {
      "get": {
        "tags": [
          "Sections"
        ],
        "summary": "Retrieve all sections",
        "description": "Retrieves the list of all sections.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "target": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "updated_at": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "error": {
                      "type": "string",
                      "nullable": true
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "nullable": true
                    },
                    "error": {
                      "type": "string"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Create a new section",
        "description": "Create a new section in the system.\n    \nsections are used to organize different types of content like articles, narrative trading posts, analysis, and s&r analysis.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Section data to be created",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "required": [
                "name",
                "description",
                "target"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "What's happening today (Top Stories)"
                },
                "description": {
                  "type": "string",
                  "example": "Articles that belong to top stories"
                },
                "target": {
                  "type": "string",
                  "example": "article",
                  "enum": [
                    "article",
                    "narrative_trading",
                    "analysis",
                    "s_and_r_analysis"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Section created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "target": {
                      "type": "string"
                    }
                  }
                },
                "error": {
                  "type": "null"
                },
                "status": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "null"
                },
                "error": {
                  "type": "string",
                  "example": "Missing required fields: name, description, target"
                },
                "status": {
                  "type": "integer",
                  "example": 400
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "null"
                },
                "error": {
                  "type": "string",
                  "example": "Database error: ..."
                },
                "status": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "tags": [
        "Sections"
      ],
      "summary": "Create a new section",
      "description": "Creates a new section.",
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "description",
                "target"
              ]
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Section created successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "target": {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string"
                      },
                      "updated_at": {
                        "type": "string"
                      }
                    }
                  },
                  "error": {
                    "type": "string",
                    "nullable": true
                  },
                  "status": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Bad request (missing required fields)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "nullable": true
                  },
                  "error": {
                    "type": "string"
                  },
                  "status": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "500": {
          "description": "Internal server error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "nullable": true
                  },
                  "error": {
                    "type": "string"
                  },
                  "status": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sections/{sectionId}": {
      "delete": {
        "tags": [
          "Sections"
        ],
        "summary": "Delete a section",
        "description": "Deletes a section by its ID.",
        "parameters": [
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Section deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "error": {
                      "type": "string",
                      "nullable": true
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Section not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "nullable": true
                    },
                    "error": {
                      "type": "string"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "nullable": true
                    },
                    "error": {
                      "type": "string"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_competitors/{coin_bot_id}": {
      "get": {
        "summary": "Get competitors data",
        "description": "Retrieve a list of competitors for a specific coin bot",
        "tags": [
          "Competitors Tokenomics"
        ],
        "parameters": [
          {
            "name": "coin_bot_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the coin bot"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "competitors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "competitor": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "No data found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/dapps": {
      "get": {
        "summary": "Get DApps data",
        "description": "Retrieve DApps data for a specific coin bot",
        "tags": [
          "Dapps"
        ],
        "parameters": [
          {
            "name": "coin_bot_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the coin bot"
          },
          {
            "name": "coin_bot_name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Name of the coin bot"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "No DApps found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/hacks": {
      "get": {
        "summary": "Get hacks data",
        "description": "Retrieve hacks data for a specific coin bot",
        "tags": [
          "Hacks"
        ],
        "parameters": [
          {
            "name": "coin_bot_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the coin bot"
          },
          {
            "name": "coin_bot_name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Name of the coin bot"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/get_tokenomics": {
      "get": {
        "summary": "Get tokenomics data",
        "description": "Retrieve tokenomics data for a specific coin bot",
        "tags": [
          "Tokenomics"
        ],
        "parameters": [
          {
            "name": "coin_name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Name of the coin bot"
          },
          {
            "name": "coin_bot_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the coin bot"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "object",
                      "properties": {
                        "token_distribution": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "token_utility": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "value_accrual_mechanisms": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "tokenomics_data": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "No tokenomics found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/get_tokenomic/{id}": {
      "get": {
        "summary": "Get individual tokenomic",
        "description": "Retrieve a specific tokenomic by ID",
        "tags": [
          "Tokenomics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the tokenomic"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tokenomic not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/get_token_distribution/{id}": {
      "get": {
        "summary": "Get token distribution",
        "description": "Retrieve a specific token distribution by ID",
        "tags": [
          "Tokenomics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the token distribution"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Token distribution not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/get_token_utility/{id}": {
      "get": {
        "summary": "Get token utility",
        "description": "Retrieve a specific token utility by ID",
        "tags": [
          "Tokenomics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the token utility"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Token utility not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/get_value_accrual/{id}": {
      "get": {
        "summary": "Get value accrual mechanism",
        "description": "Retrieve a specific value accrual mechanism by ID",
        "tags": [
          "Tokenomics"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "ID of the value accrual mechanism"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Value accrual mechanism not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/get_upgrades": {
      "get": {
        "summary": "Get upgrades data",
        "description": "Retrieve upgrades data related to a specific coin",
        "tags": [
          "Upgrades"
        ],
        "parameters": [
          {
            "name": "coin_bot_id",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "ID of the coin bot"
          },
          {
            "name": "coin_name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Name of the coin bot"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "upgrade": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Coin ID or name is missing"
          },
          "404": {
            "description": "No upgrades found for the requested coin"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/get_competitors_by_coin_name": {
      "get": {
        "tags": [
          "Competitors Tokenomics"
        ],
        "summary": "Get competitors data for a specific coin by name",
        "description": "This endpoint retrieves a list of competitors for the analyzed coin based on the provided coin name.",
        "parameters": [
          {
            "name": "coin_name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The name of the coin to get competitors for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "competitors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "competitor": {
                        "type": "object",
                        "description": "Competitor details"
                      }
                    }
                  }
                },
                "status": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Coin name is required",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Coin name is required"
                },
                "status": {
                  "type": "integer",
                  "example": 400
                }
              }
            }
          },
          "404": {
            "description": "Not found - CoinBot not found or no data for the requested coin",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "CoinBot not found for the given coin name"
                },
                "status": {
                  "type": "integer",
                  "example": 404
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error getting competitors data: [error details]"
                },
                "status": {
                  "type": "integer",
                  "example": 500
                }
              }
            }
          }
        }
      }
    },
    "/crypto-events": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Retrieve cryptocurrency events based on specified filters.",
        "description": "This endpoint queries the Coindar API to retrieve events related to cryptocurrencies, filtered by date range, coin IDs, tags, and sorting options.",
        "parameters": [
          {
            "name": "today_date",
            "in": "query",
            "description": "The lower limit of the event start date in the format yyyy-mm-dd (optional)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The upper date limit of the event start date in the format yyyy-mm-dd (optional)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "filter_coins",
            "in": "query",
            "description": "Comma-separated list of cryptocurrency IDs related to the requested events (optional)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Parameter defining events sorting; possible values are 'date_start', 'date_added', or 'views' (optional)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "date_start",
                "date_added",
                "views"
              ]
            }
          },
          {
            "name": "filter_tags",
            "in": "query",
            "description": "Comma-separated list of tag IDs (optional)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Sorting order; possible values are '0' (ascending) or '1' (descending) (optional)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cryptocurrency events retrieved successfully"
          },
          "400": {
            "description": "Invalid parameter value"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/economic-events": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Retrieve economic events based on specified filters.",
        "description": "This endpoint queries the Profit API to retrieve economic events related to forex, filtered by date range, country ISO, currency, and impact.",
        "parameters": [
          {
            "name": "country_iso",
            "in": "query",
            "description": "The country ISO code (optional). Expected values are 'US', 'GB', 'CN'.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "US",
                "GB",
                "CN"
              ]
            }
          },
          {
            "name": "impact",
            "in": "query",
            "description": "Comma-separated list of impact levels ('high', 'medium', 'low') (optional).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The lower limit of the event start date in the format yyyy-mm-dd (optional).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The upper limit of the event end date in the format yyyy-mm-dd (optional).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Economic events retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "The URL of the API request"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "List of event objects"
                    },
                    "error": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Error message, if any"
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "The URL of the API request"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "List of event objects"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "The URL of the API request"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "List of event objects"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/capitalcom-session": {
      "post": {
        "summary": "Create a session with CapitalCom",
        "description": "Creates a session with the CapitalCom API using the provided email (identifier) and password.",
        "tags": [
          "Providers"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "identifier": {
                    "type": "string",
                    "description": "The email address of the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of the user"
                  }
                },
                "required": [
                  "identifier",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "The response data from CapitalCom API if successful"
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    },
                    "X-SECURITY-TOKEN": {
                      "type": "string",
                      "description": "Security token returned by the API"
                    },
                    "CST": {
                      "type": "string",
                      "description": "Session token returned by the API"
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status code"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid identifier/password"
          },
          "401": {
            "description": "Unauthorized - invalid credentials"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/capitalcom/historical/prices": {
      "get": {
        "summary": "CapitalCom Prices - Retrieve historical prices for a specific symbol",
        "description": "Queries the CapitalCom API to retrieve historical price data for a given financial instrument, based on the provided symbol and resolution.",
        "tags": [
          "Providers"
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The symbol of the financial instrument",
            "required": true
          },
          {
            "name": "resolution",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "MINUTE",
                "MINUTE_5",
                "MINUTE_15",
                "MINUTE_30",
                "HOUR",
                "HOUR_4",
                "DAY",
                "WEEK"
              ]
            },
            "description": "The time resolution for the price data, such as 'MINUTE', 'HOUR', or 'DAY' (default is 'HOUR')",
            "required": false
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "description": "The maximum number of data points to retrieve, between 1 and 1000",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "The historical price data"
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing parameters"
          },
          "401": {
            "description": "Unauthorized - Invalid session or security token"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "X-SECURITY-TOKEN": [],
            "CST": []
          }
        ]
      }
    },
    "/funding-rates": {
      "get": {
        "summary": "Coinalyze - etrieve funding rates for specified symbols",
        "description": "This endpoint retrieves historical funding rates for a list of specified symbols from the Coinalyze API.",
        "tags": [
          "Providers"
        ],
        "parameters": [
          {
            "name": "symbols",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Comma-separated list of symbols to retrieve funding rates for."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "The historical funding rates data."
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message, if any."
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid symbol parameter or symbol is missing."
          },
          "404": {
            "description": "Not found - Symbol not found."
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/time-series": {
      "get": {
        "summary": "TwelveData - Retrieve historical time series data for a specified symbol",
        "description": "This endpoint queries the TwelveData API to retrieve historical time series data for a given financial symbol, based on the provided interval and output size.",
        "tags": [
          "Providers"
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "VIX"
            },
            "description": "The symbol of the financial instrument"
          },
          {
            "name": "interval",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "1h"
            },
            "description": "The time interval for the data points, such as '1min', '1h', or '1day'"
          },
          {
            "name": "outputsize",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "The maximum number of data points to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "The historical time series data"
                    },
                    "error": {
                      "type": "string",
                      "nullable": true,
                      "description": "Error message, if any"
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameter(s) provided"
          },
          "404": {
            "description": "Not Found - The specified symbol was not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/analysis": {
      "post": {
        "tags": [
          "Content Creation"
        ],
        "summary": "Create a new analysis",
        "description": "\n    create a new analysis with a pre-generated image.\n    \n    note:\n    - all fields are required\n    - coin_id and section_id must be valid integers\n    - image_url should be a valid url (either temporary dall-e url or permanent s3 url)\n    - content should include a title followed by <br> and then the main content\n    ",
        "parameters": [
          {
            "name": "coin_id",
            "in": "formData",
            "description": "ID of the coin",
            "required": true,
            "type": "string"
          },
          {
            "name": "section_id",
            "in": "formData",
            "description": "ID of the section",
            "required": true,
            "type": "string"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "Analysis content with title and body separated by <br>",
            "required": true,
            "type": "string"
          },
          {
            "name": "category_name",
            "in": "formData",
            "description": "Name of the category",
            "required": true,
            "type": "string"
          },
          {
            "name": "image_url",
            "in": "formData",
            "description": "URL of the pre-generated image (DALL-E or S3)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Analysis created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "description": "Created analysis data",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "coin_id": {
                      "type": "integer"
                    },
                    "content": {
                      "type": "string"
                    },
                    "image_url": {
                      "type": "string"
                    },
                    "category_name": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": "Analysis published successfully"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid parameters",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string",
                  "example": "Missing required parameters: coin_id, content"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string",
                  "example": "An unexpected error occurred"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      }
    },
    "/analyses": {
      "get": {
        "tags": [
          "Content Creation"
        ],
        "summary": "Get latest analyses across all types",
        "description": "\n    retrieve latest analyses across all analysis types with advanced filtering and search capabilities.\n    \n    the endpoint queries all analysis tables (deep dive, daily macro, narratives, spotlight, support & resistance)\n    and returns the latest posts with optional filtering and search functionality.\n    \n    results are sorted by creation date in descending order (newest first).\n    ",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of items per page (max: 100)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter analyses by content or title",
            "required": false,
            "type": "string"
          },
          {
            "name": "coin",
            "in": "query",
            "description": "Filter analyses by specific coin name",
            "required": false,
            "type": "string"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter analyses by category name",
            "required": false,
            "type": "string"
          },
          {
            "name": "section_id",
            "in": "query",
            "description": "Filter analyses by section ID",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category_icon": {
                        "type": "string",
                        "example": "/static/topmenu_icons_resize/bitcoin.png"
                      },
                      "category_name": {
                        "type": "string",
                        "example": "bitcoin"
                      },
                      "coin_icon": {
                        "type": "string",
                        "example": "/static/topmenu_icons_resize/bitcoin.png"
                      },
                      "coin_id": {
                        "type": "integer",
                        "example": 1
                      },
                      "coin_name": {
                        "type": "string",
                        "example": "btc"
                      },
                      "content": {
                        "type": "string",
                        "example": "<p>This is a test analysis for Bitcoin...</p>"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-12T22:22:32.350759-03:00"
                      },
                      "id": {
                        "type": "integer",
                        "example": 11
                      },
                      "image_url": {
                        "type": "string",
                        "example": "https://appanalysisimages.s3.us-east-2.amazonaws.com/bitcoin-analysis.jpg"
                      },
                      "section_id": {
                        "type": "integer",
                        "example": 12
                      },
                      "section_name": {
                        "type": "string",
                        "example": "Daily Macro"
                      },
                      "title": {
                        "type": "string",
                        "example": "Bitcoin Price Analysis"
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer",
                      "example": 1
                    },
                    "per_page": {
                      "type": "integer",
                      "example": 10
                    },
                    "total_items": {
                      "type": "integer",
                      "example": 66
                    },
                    "total_pages": {
                      "type": "integer",
                      "example": 7
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "nullable": true
                },
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {}
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": "Invalid pagination parameters"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {}
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "total_items": {
                      "type": "integer"
                    },
                    "total_pages": {
                      "type": "integer"
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": "An unexpected error occurred"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      }
    },
    "/analysis/{analysis_id}": {
      "delete": {
        "tags": [
          "Content Creation"
        ],
        "summary": "Delete analysis",
        "description": "Delete an existing analysis and its associated image",
        "parameters": [
          {
            "name": "analysis_id",
            "in": "path",
            "description": "ID of the analysis to delete",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "section_id",
            "in": "query",
            "description": "ID of the section",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                },
                "error": {
                  "type": "null"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "404": {
            "description": "Analysis not found",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Content Creation"
        ],
        "summary": "Update analysis",
        "description": "Update the content of an existing analysis",
        "parameters": [
          {
            "name": "analysis_id",
            "in": "path",
            "description": "ID of the analysis to update",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "body",
            "in": "body",
            "description": "Analysis update data",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "section_id": {
                  "type": "integer",
                  "description": "ID of the section the analysis belongs to"
                },
                "content": {
                  "type": "string",
                  "description": "New content for the analysis"
                }
              },
              "required": [
                "section_id",
                "content"
              ],
              "example": {
                "section_id": 1,
                "content": "Updated analysis content here"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "analysis": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "error": {
                  "type": "null"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing or invalid parameters",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "404": {
            "description": "Analysis or section not found",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Content Creation"
        ],
        "summary": "Get single analysis",
        "description": "Retrieve a single analysis by its id and section",
        "parameters": [
          {
            "name": "analysis_id",
            "in": "path",
            "description": "ID of the analysis to retrieve",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "section_id",
            "in": "query",
            "description": "ID of the section the analysis belongs to",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved analysis",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object"
                },
                "error": {
                  "type": "null"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing section_id",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "404": {
            "description": "Analysis or section not found",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      }
    },
    "/scheduled-analyses": {
      "post": {
        "tags": [
          "Scheduled Content Creation"
        ],
        "summary": "Schedule a new analysis post",
        "description": "Schedule an analysis post for future publication with specified parameters",
        "parameters": [
          {
            "name": "coin_id",
            "in": "formData",
            "description": "The ID of the coin bot",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "category_name",
            "in": "formData",
            "description": "The name of the category",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "content",
            "in": "formData",
            "description": "The content of the post (must include title followed by <br>)",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "section_id",
            "in": "formData",
            "description": "The ID of the section",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "image_url",
            "in": "formData",
            "description": "The temporary URL from DALL-E image generation",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "scheduled_date",
            "in": "formData",
            "description": "UTC datetime in ISO 8601 format (e.g., \"2024-03-28T15:30:00.000Z\")",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Post scheduled successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Post scheduled successfully"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "job_id": {
                  "type": "string",
                  "example": "9a512fbba0074dada792dfa6e5f8275d"
                },
                "scheduled_time": {
                  "type": "string",
                  "example": "2024-03-28T15:30:00.000Z"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "null"
                },
                "job_id": {
                  "type": "null"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "null"
                },
                "job_id": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Scheduled Content Creation"
        ],
        "summary": "Get all scheduled analyses with timeframe filtering",
        "description": "\n    retrieve all scheduled analyses with formatted data for card rendering.\n    supports filtering by timeframe to match the ui tabs.\n    \n    timeframe filters:\n    - today: shows posts scheduled for the current day (00:00:00 to 23:59:59)\n    - week: shows posts scheduled for the current week (sunday to saturday)\n    - month: shows posts scheduled for the current calendar month\n    - no filter: shows all future scheduled posts\n    \n    all dates are handled in the configured timezone.\n    results are sorted by scheduled time in ascending order.\n    ",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Filter posts by time period (today, week, month)",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved scheduled analyses",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "jobs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "9a512fbba0074dada792dfa6e5f8275d"
                          },
                          "coin_id": {
                            "type": "integer",
                            "example": 1
                          },
                          "coin_name": {
                            "type": "string",
                            "example": "Bitcoin"
                          },
                          "coin_icon": {
                            "type": "string",
                            "example": "https://example.com/btc-icon.png"
                          },
                          "section_name": {
                            "type": "string",
                            "example": "Technical Analysis"
                          },
                          "section_id": {
                            "type": "string",
                            "example": "tech-analysis-1"
                          },
                          "title": {
                            "type": "string",
                            "example": "Bitcoin Price Analysis"
                          },
                          "content": {
                            "type": "string",
                            "example": "Detailed analysis content..."
                          },
                          "image_url": {
                            "type": "string",
                            "example": "https://s3.amazonaws.com/appanalysisimages/btc-analysis.jpg"
                          },
                          "scheduled_time": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-03-28T15:30:00Z"
                          },
                          "category_name": {
                            "type": "string",
                            "example": "Price Action"
                          },
                          "category_icon": {
                            "type": "string",
                            "example": "https://example.com/category-icon.png"
                          }
                        }
                      }
                    }
                  }
                },
                "error": {
                  "type": "null"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "jobs": {
                      "type": "array",
                      "items": {}
                    }
                  }
                },
                "error": {
                  "type": "string",
                  "example": "An error occurred while fetching scheduled analyses"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      }
    },
    "/scheduled-analyses/{job_id}": {
      "delete": {
        "tags": [
          "Scheduled Content Creation"
        ],
        "summary": "Delete a scheduled analysis",
        "description": "Delete a specific scheduled analysis by its id",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "description": "ID of the scheduled job to delete",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Job deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Scheduled job deleted successfully"
                },
                "error": {
                  "type": "null"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "null"
                },
                "error": {
                  "type": "string",
                  "example": "Scheduled job not found"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Scheduled Content Creation"
        ],
        "summary": "Get a specific scheduled analysis",
        "description": "Retrieve detailed information about a specific scheduled analysis",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "description": "ID of the scheduled job",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved scheduled analysis",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "coin_id": {
                      "type": "integer"
                    },
                    "coin_name": {
                      "type": "string"
                    },
                    "coin_icon": {
                      "type": "string"
                    },
                    "section_name": {
                      "type": "string"
                    },
                    "section_id": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "image_url": {
                      "type": "string"
                    },
                    "scheduled_time": {
                      "type": "string"
                    },
                    "category_name": {
                      "type": "string"
                    }
                  }
                },
                "error": {
                  "type": "null"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string",
                  "example": "Scheduled job not found"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      }
    },
    "/user/{user_id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Edit user data identified by user id.",
        "description": "Edit user data identified by user id.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to edit",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "full_name": {
                  "type": "string",
                  "description": "New full name for the user"
                },
                "nickname": {
                  "type": "string",
                  "description": "New nickname for the user"
                },
                "birth_date": {
                  "type": "string",
                  "description": "New birth date for the user"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User data updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "description": "Updated user data"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided for update"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Conflict (e.g., nickname already taken)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/package": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Save a new purchased plan for a user.",
        "description": "Save a new purchased plan for a user.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "reference_name": {
                  "type": "string",
                  "description": "Reference name of the purchased plan"
                },
                "price": {
                  "type": "number",
                  "format": "float",
                  "description": "Price of the plan"
                },
                "is_subscribed": {
                  "type": "boolean",
                  "description": "Subscription status"
                },
                "auth0id": {
                  "type": "string",
                  "description": "Auth0 ID of the user purchasing the plan"
                }
              },
              "required": [
                "reference_name",
                "price",
                "auth0id",
                "is_subscribed"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package saved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields"
          },
          "404": {
            "description": "User not found for provided auth0id"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Unsubscribe a user from a purchased plan.",
        "description": "Unsubscribe a user from a purchased plan.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "auth0id": {
                  "type": "string",
                  "description": "Auth0 ID of the user"
                },
                "reference_name": {
                  "type": "string",
                  "description": "Reference name of the purchased plan"
                }
              },
              "required": [
                "auth0id",
                "reference_name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User unsubscribed from package successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields or already unsubscribed"
          },
          "404": {
            "description": "Package not found or user not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/coin": {
      "post": {
        "tags": [
          "Coin"
        ],
        "summary": "Create a new coin bot in the database.",
        "description": "Create a new coin bot in the database.",
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The name of the coin bot",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "alias",
            "in": "formData",
            "description": "An alternative identifier for the coin bot",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "symbol",
            "in": "formData",
            "description": "The symbol of the coin",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "The ID of the associated category",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "background_color",
            "in": "formData",
            "description": "HEX code string for visual representation",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "icon",
            "in": "formData",
            "description": "An SVG file to be used as the coin bot icon",
            "required": false,
            "type": "file",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "coin": {
                  "type": "object",
                  "description": "The created coin bot data"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (missing required fields, invalid SVG, or name/alias already exists)"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/coin/{coin_id}": {
      "get": {
        "tags": [
          "Coin"
        ],
        "summary": "Retrieve a single coin from the database with its full details, keywords, and blacklist.",
        "description": "Retrieve a single coin from the database with its full details, keywords, and blacklist.",
        "parameters": [
          {
            "name": "coin_id",
            "in": "path",
            "description": "The ID of the coin to retrieve",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the coin",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "coin": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "alias": {
                      "type": "string"
                    },
                    "category": {
                      "type": "object"
                    },
                    "whitelist": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "blacklist": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Coin not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Coin"
        ],
        "summary": "Update a coin's information in the database.",
        "description": "Update a coin's information in the database.",
        "parameters": [
          {
            "name": "coin_id",
            "in": "path",
            "description": "The ID of the coin to be updated",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The new name of the coin bot",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "alias",
            "in": "formData",
            "description": "The new alias of the coin bot",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "category_id",
            "in": "formData",
            "description": "The new category ID for the coin bot",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "background_color",
            "in": "formData",
            "description": "The new background color for the coin bot",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "icon",
            "in": "formData",
            "description": "The new SVG icon file for the coin bot",
            "required": false,
            "type": "file",
            "schema": {}
          },
          {
            "name": "symbol",
            "in": "formData",
            "description": "The new symbol for the coin bot",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Coin updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "coin": {
                  "type": "object",
                  "description": "The updated coin bot data"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (no update data provided or invalid data)"
          },
          "404": {
            "description": "Coin not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "/api/fundamental_ai_search": {
        "post": {
          "tags": [
            "Fundamentals"
          ],
          "summary": "Perform a fundamental AI search",
          "description": "This endpoint performs an AI-powered search for fundamental data of a cryptocurrency.",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "section_name": {
                    "type": "string",
                    "description": "The section to search (e.g., 'revenue', 'upgrade', 'hacks', 'dapps')"
                  },
                  "coin_name": {
                    "type": "string",
                    "description": "The name or symbol of the cryptocurrency"
                  }
                },
                "required": [
                  "section_name",
                  "coin_name"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful operation",
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean"
                  },
                  "message": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "data": {
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/api/save_fundamental_data": {
        "post": {
          "tags": [
            "Fundamentals"
          ],
          "summary": "Save fundamental data",
          "description": "This endpoint saves the fundamental data retrieved from the AI search.",
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "properties": {
                  "section_name": {
                    "type": "string",
                    "description": "The section of the data (e.g., 'revenue', 'upgrade', 'hacks', 'dapps')"
                  },
                  "coin_bot_id": {
                    "type": "integer",
                    "description": "The ID of the associated CoinBot"
                  },
                  "content": {
                    "type": "object",
                    "description": "The content to be saved"
                  }
                },
                "required": [
                  "section_name",
                  "coin_bot_id",
                  "content"
                ]
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Data saved successfully",
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean"
                  },
                  "message": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Coin"
        ],
        "summary": "Delete a coin from the database.",
        "description": "Delete a coin from the database.",
        "parameters": [
          {
            "name": "coin_id",
            "in": "path",
            "description": "The ID of the coin to delete",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Coin deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Coin not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/coins": {
      "get": {
        "tags": [
          "Coin"
        ],
        "summary": "Retrieve all coins from the database with optional ordering and full details.",
        "description": "Retrieve all coins from the database with optional ordering and full details.",
        "parameters": [
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned coins. Accepts 'asc' or 'desc'. Defaults to 'asc'.",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved coins",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "coins": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Coin bot with full details"
                  }
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid order parameter)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/coin/{coin_id}/toggle-coin": {
      "post": {
        "tags": [
          "Coin"
        ],
        "summary": "Toggle coin activation status",
        "description": "Toggle a coin's active status. activation requires an active category and valid coin data. deactivation is always allowed.",
        "parameters": [
          {
            "name": "coin_id",
            "in": "path",
            "description": "ID of the coin to toggle",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully toggled coin status",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "message": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                },
                "error": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (inactive category or failed validation)",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Coin not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string"
                },
                "is_active": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/coins-ids/{category_name}": {
      "get": {
        "tags": [
          "Coin"
        ],
        "summary": "Retrieve coins ids associated with a given category name.",
        "description": "Retrieve coins ids associated with a given category name.",
        "parameters": [
          {
            "name": "category_name",
            "in": "path",
            "description": "The name of the category to find bots for",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "List of bot IDs retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "coin_ids": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/category": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Create a new category.",
        "description": "Create a new category.",
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "The main identifier for the category",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "alias",
            "in": "formData",
            "description": "An alternative identifier for the category",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "border_color",
            "in": "formData",
            "description": "HEX code string for visual representation",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "icon",
            "in": "formData",
            "description": "An SVG file to be used as the category icon",
            "required": false,
            "type": "file",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "category": {
                  "type": "object",
                  "description": "The created category data"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (missing required fields, invalid SVG, or category already exists)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/category/{category_id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Retrieve a single category with its associated coins.",
        "description": "Retrieve a single category with its associated coins.",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The ID of the category to retrieve",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned coins within the category. Accepts 'asc' or 'desc'.",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the category",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "alias": {
                      "type": "string"
                    },
                    "border_color": {
                      "type": "string"
                    },
                    "icon": {
                      "type": "string"
                    },
                    "coins": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Associated coin data"
                      }
                    }
                  }
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid order parameter)"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Delete a category and its associated icon from the database and s3 storage.",
        "description": "Delete a category and its associated icon from the database and s3 storage.",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The ID of the category to be deleted",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the category",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Update a category's information in the database.",
        "description": "Update a category's information in the database.",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The ID of the category to be updated",
            "required": true,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "name",
            "in": "formData",
            "description": "The new name of the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "alias",
            "in": "formData",
            "description": "The new alias of the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "border_color",
            "in": "formData",
            "description": "The new border color for the category",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "icon",
            "in": "formData",
            "description": "The new SVG icon file for the category",
            "required": false,
            "type": "file",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "category": {
                  "type": "object",
                  "description": "The updated category data"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (no update data provided or invalid data)"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Retrieve all categories with their associated coins, sorted alphabetically by name.",
        "description": "Retrieve all categories with their associated coins, sorted alphabetically by name.",
        "parameters": [
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned categories. Accepts 'asc' or 'desc'.",
            "required": false,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved categories",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "alias": {
                        "type": "string"
                      },
                      "border_color": {
                        "type": "string"
                      },
                      "icon": {
                        "type": "string"
                      },
                      "coins": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "description": "Associated coin data"
                        }
                      }
                    }
                  }
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid order parameter)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/categories/{category_id}/toggle-coins": {
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Toggle category and coin activation status",
        "description": "Toggle a category's active status and optionally validate and activate/deactivate its associated coins",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "ID of the category to toggle",
            "required": true,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully toggled category status",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "processed_coins": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "activated",
                          "deactivated",
                          "invalid",
                          "unchanged"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                },
                "category_status": {
                  "type": "string",
                  "enum": [
                    "activated",
                    "deactivated"
                  ]
                },
                "error": {
                  "type": "null"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "processed_coins": {
                  "type": "array",
                  "items": {}
                },
                "category_status": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "processed_coins": {
                  "type": "array",
                  "items": {}
                },
                "category_status": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/chart": {
      "post": {
        "tags": [
          "Chart"
        ],
        "summary": "Adds a new support and resistance lines record for a coin.",
        "description": "Adds a new support and resistance lines record for a coin.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "coin_id": {
                  "type": "integer"
                },
                "pair": {
                  "type": "string"
                },
                "temporality": {
                  "type": "string"
                },
                "coin_name": {
                  "type": "string"
                },
                "support_1": {
                  "type": "number"
                },
                "support_2": {
                  "type": "number"
                },
                "support_3": {
                  "type": "number"
                },
                "support_4": {
                  "type": "number"
                },
                "resistance_1": {
                  "type": "number"
                },
                "resistance_2": {
                  "type": "number"
                },
                "resistance_3": {
                  "type": "number"
                },
                "resistance_4": {
                  "type": "number"
                },
                "is_essential": {
                  "type": "boolean",
                  "description": "Indicates if the support and resistance lines are essential for the coin",
                  "default": false
                }
              },
              "required": [
                "coin_id",
                "pair",
                "temporality",
                "coin_name",
                "support_1",
                "support_2",
                "support_3",
                "support_4",
                "resistance_1",
                "resistance_2",
                "resistance_3",
                "resistance_4"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New chart record created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Chart"
        ],
        "summary": "Get the most recent support and resistance lines of a requested coin.",
        "description": "Get the most recent support and resistance lines of a requested coin.",
        "parameters": [
          {
            "name": "coin_name",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "coin_id",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "temporality",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "pair",
            "in": "query",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved chart values",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "object"
                },
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/chart/total3": {
      "get": {
        "tags": [
          "Chart"
        ],
        "summary": "Retrieve and calculate total market cap data for the top 3 cryptocurrencies.",
        "description": "Retrieve and calculate total market cap data for the top 3 cryptocurrencies.",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved data",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                },
                "data": {
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "status": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/chart/top-movers": {
      "get": {
        "tags": [
          "Chart"
        ],
        "summary": "Get top movers in the cryptocurrency market.",
        "description": "Get top movers in the cryptocurrency market.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved top movers",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      }
    },
    "/chart/ohlc": {
      "get": {
        "tags": [
          "Chart"
        ],
        "summary": "Retrieve ohlc (open, high, low, close) chart data for a specified cryptocurrency.",
        "description": "Retrieve ohlc (open, high, low, close) chart data for a specified cryptocurrency.",
        "parameters": [
          {
            "name": "gecko_id",
            "in": "query",
            "description": "The CoinGecko ID of the cryptocurrency",
            "required": true,
            "type": "string",
            "schema": {}
          },
          {
            "name": "vs_currency",
            "in": "query",
            "description": "The target currency for market data",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "interval",
            "in": "query",
            "description": "The time interval for OHLC data",
            "required": false,
            "type": "string",
            "schema": {}
          },
          {
            "name": "precision",
            "in": "query",
            "description": "The number of decimal places for price data",
            "required": false,
            "type": "integer",
            "schema": {}
          },
          {
            "name": "symbol",
            "in": "query",
            "description": "The trading symbol of the cryptocurrency",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved OHLC data",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "minItems": 5,
                    "maxItems": 5
                  },
                  "description": "Array of OHLC data points [timestamp, open, high, low, close]"
                },
                "error": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/subscriber-info": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Revenuecat - Retrieve user information from revenuecat.",
        "description": "Retrieve user information from revenuecat.",
        "parameters": [
          {
            "name": "revenuecat_user_id",
            "in": "query",
            "description": "The unique identifier of the RevenueCat user",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved subscriber information",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "description": "The user information from RevenueCat"
                },
                "error": {
                  "type": "string",
                  "nullable": true
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/coingecko/usage": {
      "get": {
        "tags": [
          "CoinGecko"
        ],
        "summary": "Retrieve coingecko api usage information.",
        "description": "Retrieve coingecko api usage information.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved CoinGecko API usage information",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "description": "The CoinGecko API usage information"
                },
                "error": {
                  "type": "string",
                  "nullable": true
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/categories": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Retrieve alerts for multiple categories",
        "description": "Retrieve alerts for multiple categories with timeframe filtering and pagination support.\n    \nthe endpoint allows filtering alerts by timeframe (1h, 4h, 1d, 1w) extracted from the alert name.\nresults are ordered by creation date (newest first) with optional pagination.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of category names",
                  "example": [
                    "bitcoin",
                    "ethereum"
                  ]
                },
                "timeframe": {
                  "type": "string",
                  "enum": [
                    "1h",
                    "4h",
                    "1d",
                    "1w"
                  ],
                  "description": "Filter alerts by timeframe",
                  "example": "4h"
                },
                "page": {
                  "type": "integer",
                  "description": "Page number (default: 1)",
                  "default": 1,
                  "minimum": 1
                },
                "per_page": {
                  "type": "integer",
                  "description": "Items per page (default: 10)",
                  "default": 10,
                  "minimum": 1
                }
              },
              "required": [
                "categories"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved alerts by categories",
            "schema": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "alert_id": {
                              "type": "integer"
                            },
                            "alert_name": {
                              "type": "string"
                            },
                            "alert_message": {
                              "type": "string"
                            },
                            "symbol": {
                              "type": "string"
                            },
                            "price": {
                              "type": "number"
                            },
                            "coin_bot_id": {
                              "type": "integer"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated_at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "timeframe": {
                              "type": "string",
                              "enum": [
                                "1h",
                                "4h",
                                "1d",
                                "1w"
                              ],
                              "nullable": true
                            }
                          }
                        }
                      },
                      "total": {
                        "type": "integer"
                      },
                      "pagination": {
                        "type": "object",
                        "properties": {
                          "current_page": {
                            "type": "integer"
                          },
                          "per_page": {
                            "type": "integer"
                          },
                          "total_pages": {
                            "type": "integer"
                          },
                          "has_next": {
                            "type": "boolean"
                          },
                          "has_prev": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "total_alerts": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid timeframe. Must be one of: 1h, 4h, 1d, 1w"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/coins": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Retrieve alerts for multiple coins",
        "description": "Retrieve alerts for multiple coins with timeframe filtering and pagination support.\n    \nthe endpoint allows filtering alerts by timeframe (1h, 4h, 1d, 1w) extracted from the alert name.\nresults are ordered by creation date (newest first) with optional pagination.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "type": "string",
            "schema": {
              "type": "object",
              "properties": {
                "coins": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of coin symbols",
                  "example": [
                    "btc",
                    "eth"
                  ]
                },
                "timeframe": {
                  "type": "string",
                  "enum": [
                    "1h",
                    "4h",
                    "1d",
                    "1w"
                  ],
                  "description": "Filter alerts by timeframe",
                  "example": "4h"
                },
                "page": {
                  "type": "integer",
                  "description": "Page number (default: 1)",
                  "default": 1,
                  "minimum": 1
                },
                "per_page": {
                  "type": "integer",
                  "description": "Items per page (default: 10)",
                  "default": 10,
                  "minimum": 1
                }
              },
              "required": [
                "coins"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved alerts by coins",
            "schema": {
              "type": "object",
              "properties": {
                "coins": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "alert_id": {
                              "type": "integer"
                            },
                            "alert_name": {
                              "type": "string"
                            },
                            "alert_message": {
                              "type": "string"
                            },
                            "symbol": {
                              "type": "string"
                            },
                            "price": {
                              "type": "number"
                            },
                            "coin_bot_id": {
                              "type": "integer"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "updated_at": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "timeframe": {
                              "type": "string",
                              "enum": [
                                "1h",
                                "4h",
                                "1d",
                                "1w"
                              ],
                              "nullable": true
                            }
                          }
                        }
                      },
                      "total": {
                        "type": "integer"
                      },
                      "pagination": {
                        "type": "object",
                        "properties": {
                          "current_page": {
                            "type": "integer"
                          },
                          "per_page": {
                            "type": "integer"
                          },
                          "total_pages": {
                            "type": "integer"
                          },
                          "has_next": {
                            "type": "boolean"
                          },
                          "has_prev": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "total_alerts": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid timeframe. Must be one of: 1h, 4h, 1d, 1w"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/ask-ai/coins": {
      "get": {
        "tags": [
          "Ask AI"
        ],
        "summary": "Get list of available cryptocurrencies",
        "description": "Retrieve a comprehensive list of all available cryptocurrencies from coingecko.\n    \nthis endpoint is cached for 24 hours (86400 seconds) to optimize performance and reduce api calls.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of cryptocurrencies",
            "schema": {
              "type": "object",
              "properties": {
                "coins": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "bitcoin"
                      },
                      "symbol": {
                        "type": "string",
                        "example": "btc"
                      },
                      "name": {
                        "type": "string",
                        "example": "Bitcoin"
                      }
                    }
                  }
                },
                "length": {
                  "type": "integer",
                  "example": 1000
                },
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "error": {
                  "type": "string",
                  "nullable": true,
                  "example": null
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "coins": {
                  "type": "array",
                  "items": {}
                },
                "length": {
                  "type": "integer",
                  "example": 0
                },
                "error": {
                  "type": "string"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      }
    },
    "/ask-ai": {
      "get": {
        "tags": [
          "Ask AI"
        ],
        "summary": "Get detailed cryptocurrency information",
        "description": "[cached for 5 minutes] retrieve comprehensive tokenomics data for a specific cryptocurrency using its coin id. the response is cached to optimize performance and handle rate limiting. the endpoint provides detailed information including price, market cap, supply metrics, and icon urls in various formats.",
        "parameters": [
          {
            "name": "coin_id",
            "in": "query",
            "description": "The CoinGecko ID of the cryptocurrency (e.g., \"bitcoin\", \"ethereum\")",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved cryptocurrency data",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "error": {
                  "type": "null"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "website": {
                      "type": "string",
                      "description": "Main project website URL",
                      "example": "https://bitcoin.org"
                    },
                    "whitepaper": {
                      "type": "string",
                      "description": "URL to project whitepaper (from CoinGecko or CoinMarketCap)",
                      "example": "https://bitcoin.org/bitcoin.pdf"
                    },
                    "categories": {
                      "type": "array",
                      "description": "List of categories the coin belongs to",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Cryptocurrency",
                        "Store of Value"
                      ]
                    },
                    "chains": {
                      "type": "array",
                      "description": "List of blockchain platforms where the token exists",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "bitcoin"
                      ]
                    },
                    "current_price": {
                      "type": "number",
                      "description": "Current price in USD",
                      "example": 50000.0
                    },
                    "market_cap_usd": {
                      "type": "number",
                      "description": "Market capitalization in USD",
                      "example": 1000000000000
                    },
                    "fully_diluted_valuation": {
                      "type": "number",
                      "description": "Fully diluted valuation in USD",
                      "example": 1100000000000
                    },
                    "ath": {
                      "type": "number",
                      "description": "All-time high price in USD",
                      "example": 69000.0
                    },
                    "ath_change_percentage": {
                      "type": "number",
                      "description": "Percentage change from ATH",
                      "example": -25.5
                    },
                    "circulating_supply": {
                      "type": "number",
                      "description": "Current circulating supply",
                      "example": 19000000
                    },
                    "icon": {
                      "type": "object",
                      "description": "Icon URLs in various formats",
                      "properties": {
                        "thumb": {
                          "type": "string",
                          "description": "Thumbnail size icon URL"
                        },
                        "small": {
                          "type": "string",
                          "description": "Small size icon URL"
                        },
                        "large": {
                          "type": "string",
                          "description": "Large size icon URL"
                        },
                        "svg": {
                          "type": "string",
                          "description": "SVG version of the icon (if conversion successful)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing coin_id parameter",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "error": {
                  "type": "string",
                  "example": "The parameter coin_id is required"
                },
                "data": {
                  "type": "null"
                }
              }
            }
          },
          "404": {
            "description": "Cryptocurrency not found or API error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "error": {
                  "type": "string",
                  "example": "Cryptocurrency not found or API request failed"
                },
                "data": {
                  "type": "null"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "error": {
                  "type": "string",
                  "example": "Too many requests. Please try again later."
                },
                "data": {
                  "type": "null"
                },
                "rate_limit": {
                  "type": "object",
                  "properties": {
                    "max_calls": {
                      "type": "integer",
                      "example": 10
                    },
                    "period": {
                      "type": "integer",
                      "example": 60
                    },
                    "current_calls": {
                      "type": "integer",
                      "example": 11
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "error": {
                  "type": "string",
                  "example": "An unexpected error occurred while fetching cryptocurrency data"
                },
                "data": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/analysis/generate-image": {
      "post": {
        "tags": [
          "Content Creation"
        ],
        "summary": "Generate an image",
        "description": "\n    generate an ai image based on analysis content.\n    the endpoint processes the content, extracts the relevant text, and generates an appropriate image.\n    returns a temporary url that can be used to download the generated image.\n    \n    note: \n    - content must include a title followed by <br> and then the main content\n    - the image generation is based on the content body (after the <br>)\n    - the returned url is temporary and will expire\n    ",
        "parameters": [
          {
            "name": "content",
            "in": "formData",
            "description": "Analysis content with title and body separated by <br>",
            "required": true,
            "type": "string",
            "schema": {}
          }
        ],
        "responses": {
          "201": {
            "description": "Image generated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "temp_image_url": {
                      "type": "string",
                      "example": "https://oaidalleapiprodscus.blob.core.windows.net/private/...",
                      "description": "Temporary URL to the generated image"
                    }
                  }
                },
                "message": {
                  "type": "string",
                  "example": "Image generated successfully"
                },
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "error": {
                  "type": "null"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string",
                  "example": "Content is required"
                },
                "message": {
                  "type": "string",
                  "example": "Image generation failed"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "500": {
            "description": "Server error during image generation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "null"
                },
                "error": {
                  "type": "string",
                  "example": "An unexpected error occurred: DALL-E API error"
                },
                "message": {
                  "type": "string",
                  "example": "Internal server error during image generation"
                },
                "success": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      }
    },
    "/topics": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get all notification topics",
        "description": "\n    retrieve all notification topics with optional filtering capabilities.\n    \n    the endpoint returns a list of topics that can be filtered by coin reference, topic type, and timeframe.\n    if no filters are provided, it returns all available topics.\n    \n    topics are used for managing notification subscriptions and message routing in the system.\n    ",
        "parameters": [
          {
            "name": "coin",
            "in": "query",
            "description": "Filter topics by coin reference (e.g., \"bitcoin\", \"ethereum\")",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by topic type (e.g., \"alerts\", \"support_resistance\")",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Filter by timeframe (e.g., \"1d\", \"1w\")",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 1
                      },
                      "name": {
                        "type": "string",
                        "example": "bitcoin_alerts_1d"
                      },
                      "reference": {
                        "type": "string",
                        "example": "bitcoin, btc"
                      },
                      "timeframe": {
                        "type": "string",
                        "example": "1d"
                      },
                      "type": {
                        "type": "string",
                        "example": "alerts"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-20T12:00:00Z"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-20T12:00:00Z"
                      }
                    }
                  }
                },
                "count": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "error": {
                  "type": "string",
                  "example": "Database connection error"
                },
                "message": {
                  "type": "string",
                  "example": "Failed to fetch topics"
                }
              }
            }
          }
        }
      }
    },
    "/introduction": {
      "post": {
        "tags": [
          "Introduction"
        ],
        "summary": "Create a new introduction for a coin",
        "description": "\n    creates a new introduction entry for a specific coin.\n    \n    this endpoint allows you to create an introduction with required content, website, and whitepaper information.\n    each coin can only have one introduction. attempting to create multiple introductions for the same coin will result in an error.\n    ",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "coin_id": {
                  "type": "integer",
                  "description": "ID of the coin",
                  "example": 1
                },
                "content": {
                  "type": "string",
                  "description": "Introduction content",
                  "example": "This is a detailed introduction about the coin..."
                },
                "website": {
                  "type": "string",
                  "description": "Official website URL",
                  "example": "https://example.com"
                },
                "whitepaper": {
                  "type": "string",
                  "description": "Whitepaper URL",
                  "example": "https://example.com/whitepaper.pdf"
                },
                "dynamic": {
                  "type": "boolean",
                  "description": "Whether the introduction is dynamic",
                  "example": false
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Introduction created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Introduction created successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "coin_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "content": {
                      "type": "string",
                      "example": "Introduction content"
                    },
                    "website": {
                      "type": "string",
                      "example": "https://example.com"
                    },
                    "whitepaper": {
                      "type": "string",
                      "example": "https://example.com/whitepaper.pdf"
                    },
                    "dynamic": {
                      "type": "boolean",
                      "example": false
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "content is required"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Introduction already exists",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "An introduction already exists for this coin"
                }
              }
            }
          }
        },
        "consumes": [
          "application/json"
        ]
      }
    },
    "/introduction/{coin_id}": {
      "put": {
        "tags": [
          "Introduction"
        ],
        "summary": "Update introduction for a specific coin",
        "description": "Update the content, website, or whitepaper information for an existing introduction.",
        "parameters": [
          {
            "name": "coin_id",
            "in": "path",
            "description": "ID of the coin",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "Updated introduction content",
                  "example": "Updated introduction content..."
                },
                "website": {
                  "type": "string",
                  "description": "Updated website URL",
                  "example": "https://updated-example.com"
                },
                "whitepaper": {
                  "type": "string",
                  "description": "Updated whitepaper URL",
                  "example": "https://updated-example.com/whitepaper.pdf"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Introduction updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Introduction updated successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "coin_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "content": {
                      "type": "string",
                      "example": "Updated content"
                    },
                    "website": {
                      "type": "string",
                      "example": "https://updated-example.com"
                    },
                    "whitepaper": {
                      "type": "string",
                      "example": "https://updated-example.com/whitepaper.pdf"
                    },
                    "dynamic": {
                      "type": "boolean",
                      "example": false
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "At least one field (content, website, or whitepaper) is required"
                }
              }
            }
          },
          "404": {
            "description": "Introduction not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "No introduction found for the specified coin"
                }
              }
            }
          }
        },
        "consumes": [
          "application/json"
        ]
      },
      "get": {
        "tags": [
          "Introduction"
        ],
        "summary": "Get introduction by coin id",
        "description": "Retrieve the introduction information for a specific coin using the coin id.",
        "parameters": [
          {
            "name": "coin_id",
            "in": "path",
            "description": "ID of the coin",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "coin_bot_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "content": {
                      "type": "string",
                      "example": "Introduction content"
                    },
                    "website": {
                      "type": "string",
                      "example": "https://example.com"
                    },
                    "whitepaper": {
                      "type": "string",
                      "example": "https://example.com/whitepaper.pdf"
                    },
                    "dynamic": {
                      "type": "boolean",
                      "example": false
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "coin_id is required"
                }
              }
            }
          },
          "404": {
            "description": "Introduction not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "No introduction found for the specified coin"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Database error: [error details]"
                }
              }
            }
          }
        }
      }
    },
    "/revenue_model": {
      "post": {
        "tags": [
          "Revenue Model"
        ],
        "summary": "Create a revenue model",
        "description": "Create a new revenue model for a specific coin",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "coin_id": {
                  "type": "integer",
                  "description": "ID of the coin",
                  "example": 1
                },
                "analized_revenue": {
                  "type": "string",
                  "description": "Analyzed revenue information",
                  "example": "Detailed revenue analysis..."
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Revenue model created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Revenue model created successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "coin_bot_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "analized_revenue": {
                      "type": "string",
                      "example": "Detailed revenue analysis..."
                    },
                    "dynamic": {
                      "type": "boolean",
                      "example": true
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "coin_id and analized_revenue are required"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Revenue model already exists for this coin"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Database error: [error details]"
                }
              }
            }
          }
        },
        "consumes": [
          "application/json"
        ]
      }
    },
    "/revenue_model/{coin_id}": {
      "get": {
        "tags": [
          "Revenue Model"
        ],
        "summary": "Get revenue model",
        "description": "Retrieve the revenue model for a specific coin",
        "parameters": [
          {
            "name": "coin_id",
            "in": "path",
            "description": "ID of the coin",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "coin_bot_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "analized_revenue": {
                      "type": "string",
                      "example": "Detailed revenue analysis..."
                    },
                    "dynamic": {
                      "type": "boolean",
                      "example": true
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "No revenue model found for this coin"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Database error: [error details]"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Revenue Model"
        ],
        "summary": "Update revenue model",
        "description": "Update the revenue model for a specific coin",
        "parameters": [
          {
            "name": "coin_id",
            "in": "path",
            "description": "ID of the coin",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "analized_revenue": {
                  "type": "string",
                  "description": "Updated analyzed revenue information",
                  "example": "Updated revenue analysis..."
                },
                "dynamic": {
                  "type": "boolean",
                  "description": "Whether the revenue model is dynamic",
                  "example": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "message": {
                  "type": "string",
                  "example": "Revenue model updated successfully"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "coin_bot_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "analized_revenue": {
                      "type": "string",
                      "example": "Updated revenue analysis..."
                    },
                    "dynamic": {
                      "type": "boolean",
                      "example": true
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "analized_revenue is required"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "No revenue model found for this coin"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Database error: [error details]"
                }
              }
            }
          }
        },
        "consumes": [
          "application/json"
        ]
      }
    }
  },
  "definitions": {
    "UserWithPlans": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer"
        },
        "nickname": {
          "type": "string"
        },
        "full_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "email_verified": {
          "type": "boolean"
        },
        "picture": {
          "type": "string"
        },
        "auth0id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "purchased_plans": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "product_id": {
                "type": "integer"
              },
              "reference_name": {
                "type": "string"
              },
              "price": {
                "type": "number"
              },
              "is_subscribed": {
                "type": "boolean"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      }
    },
    "CryptoData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "current_price": {
          "type": "number"
        },
        "market_cap": {
          "type": "number"
        },
        "market_cap_rank": {
          "type": "integer"
        },
        "total_volume": {
          "type": "number"
        },
        "high_24h": {
          "type": "number"
        },
        "low_24h": {
          "type": "number"
        },
        "price_change_24h": {
          "type": "number"
        },
        "price_change_percentage_24h": {
          "type": "number"
        },
        "market_cap_change_24h": {
          "type": "number"
        },
        "market_cap_change_percentage_24h": {
          "type": "number"
        },
        "circulating_supply": {
          "type": "number"
        },
        "total_supply": {
          "type": "number"
        },
        "max_supply": {
          "type": "number"
        },
        "ath": {
          "type": "number"
        },
        "ath_change_percentage": {
          "type": "number"
        },
        "ath_date": {
          "type": "string",
          "format": "date-time"
        },
        "atl": {
          "type": "number"
        },
        "atl_change_percentage": {
          "type": "number"
        },
        "atl_date": {
          "type": "string",
          "format": "date-time"
        },
        "roi": {
          "type": "object",
          "properties": {
            "times": {
              "type": "number"
            },
            "currency": {
              "type": "string"
            },
            "percentage": {
              "type": "number"
            }
          }
        },
        "last_updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}